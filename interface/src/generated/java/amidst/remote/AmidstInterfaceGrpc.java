//Generated by flatc compiler (version 1.9.0)
//If you make any local changes, they will be lost
//source: amidstinterface.fbs

package amidst.remote;

import com.google.flatbuffers.grpc.FlatbuffersUtils;

import java.nio.ByteBuffer;
import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler",
    comments = "Source: amidstinterface.fbs")
public final class AmidstInterfaceGrpc {

  private AmidstInterfaceGrpc() {}
  
  public static final String SERVICE_NAME = "amidst.remote.AmidstInterface";
  
  // Static method descriptors that strictly reflect the proto.
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getGetBiomeDataMethod()} instead. 
  public static final io.grpc.MethodDescriptor<amidst.remote.BiomeDataRequest,
      amidst.remote.BiomeDataReply> METHOD_GET_BIOME_DATA = getGetBiomeDataMethod();
  
  private static volatile io.grpc.MethodDescriptor<amidst.remote.BiomeDataRequest,
      amidst.remote.BiomeDataReply> getGetBiomeDataMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<amidst.remote.BiomeDataRequest> extractorOfBiomeDataRequest;
  private static FlatbuffersUtils.FBExtactor<amidst.remote.BiomeDataRequest> getExtractorOfBiomeDataRequest() {
      if (extractorOfBiomeDataRequest != null) return extractorOfBiomeDataRequest;
      synchronized (AmidstInterfaceGrpc.class) {
          if (extractorOfBiomeDataRequest != null) return extractorOfBiomeDataRequest;
          extractorOfBiomeDataRequest = new FlatbuffersUtils.FBExtactor<amidst.remote.BiomeDataRequest>() {
              public amidst.remote.BiomeDataRequest extract (ByteBuffer buffer) {
                  return amidst.remote.BiomeDataRequest.getRootAsBiomeDataRequest(buffer);
              }
          };
          return extractorOfBiomeDataRequest;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<amidst.remote.BiomeDataReply> extractorOfBiomeDataReply;
  private static FlatbuffersUtils.FBExtactor<amidst.remote.BiomeDataReply> getExtractorOfBiomeDataReply() {
      if (extractorOfBiomeDataReply != null) return extractorOfBiomeDataReply;
      synchronized (AmidstInterfaceGrpc.class) {
          if (extractorOfBiomeDataReply != null) return extractorOfBiomeDataReply;
          extractorOfBiomeDataReply = new FlatbuffersUtils.FBExtactor<amidst.remote.BiomeDataReply>() {
              public amidst.remote.BiomeDataReply extract (ByteBuffer buffer) {
                  return amidst.remote.BiomeDataReply.getRootAsBiomeDataReply(buffer);
              }
          };
          return extractorOfBiomeDataReply;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<amidst.remote.BiomeDataRequest,
      amidst.remote.BiomeDataReply> getGetBiomeDataMethod() {
    io.grpc.MethodDescriptor<amidst.remote.BiomeDataRequest, amidst.remote.BiomeDataReply> getGetBiomeDataMethod;
    if ((getGetBiomeDataMethod = AmidstInterfaceGrpc.getGetBiomeDataMethod) == null) {
      synchronized (AmidstInterfaceGrpc.class) {
        if ((getGetBiomeDataMethod = AmidstInterfaceGrpc.getGetBiomeDataMethod) == null) {
          AmidstInterfaceGrpc.getGetBiomeDataMethod = getGetBiomeDataMethod = 
              io.grpc.MethodDescriptor.<amidst.remote.BiomeDataRequest, amidst.remote.BiomeDataReply>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "amidst.remote.AmidstInterface", "GetBiomeData"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  amidst.remote.BiomeDataRequest.class, getExtractorOfBiomeDataRequest()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  amidst.remote.BiomeDataReply.class, getExtractorOfBiomeDataReply()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getGetBiomeDataMethod;
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getGetBiomeListMethod()} instead. 
  public static final io.grpc.MethodDescriptor<amidst.remote.GetBiomeListRequest,
      amidst.remote.BiomeListReply> METHOD_GET_BIOME_LIST = getGetBiomeListMethod();
  
  private static volatile io.grpc.MethodDescriptor<amidst.remote.GetBiomeListRequest,
      amidst.remote.BiomeListReply> getGetBiomeListMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<amidst.remote.GetBiomeListRequest> extractorOfGetBiomeListRequest;
  private static FlatbuffersUtils.FBExtactor<amidst.remote.GetBiomeListRequest> getExtractorOfGetBiomeListRequest() {
      if (extractorOfGetBiomeListRequest != null) return extractorOfGetBiomeListRequest;
      synchronized (AmidstInterfaceGrpc.class) {
          if (extractorOfGetBiomeListRequest != null) return extractorOfGetBiomeListRequest;
          extractorOfGetBiomeListRequest = new FlatbuffersUtils.FBExtactor<amidst.remote.GetBiomeListRequest>() {
              public amidst.remote.GetBiomeListRequest extract (ByteBuffer buffer) {
                  return amidst.remote.GetBiomeListRequest.getRootAsGetBiomeListRequest(buffer);
              }
          };
          return extractorOfGetBiomeListRequest;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<amidst.remote.BiomeListReply> extractorOfBiomeListReply;
  private static FlatbuffersUtils.FBExtactor<amidst.remote.BiomeListReply> getExtractorOfBiomeListReply() {
      if (extractorOfBiomeListReply != null) return extractorOfBiomeListReply;
      synchronized (AmidstInterfaceGrpc.class) {
          if (extractorOfBiomeListReply != null) return extractorOfBiomeListReply;
          extractorOfBiomeListReply = new FlatbuffersUtils.FBExtactor<amidst.remote.BiomeListReply>() {
              public amidst.remote.BiomeListReply extract (ByteBuffer buffer) {
                  return amidst.remote.BiomeListReply.getRootAsBiomeListReply(buffer);
              }
          };
          return extractorOfBiomeListReply;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<amidst.remote.GetBiomeListRequest,
      amidst.remote.BiomeListReply> getGetBiomeListMethod() {
    io.grpc.MethodDescriptor<amidst.remote.GetBiomeListRequest, amidst.remote.BiomeListReply> getGetBiomeListMethod;
    if ((getGetBiomeListMethod = AmidstInterfaceGrpc.getGetBiomeListMethod) == null) {
      synchronized (AmidstInterfaceGrpc.class) {
        if ((getGetBiomeListMethod = AmidstInterfaceGrpc.getGetBiomeListMethod) == null) {
          AmidstInterfaceGrpc.getGetBiomeListMethod = getGetBiomeListMethod = 
              io.grpc.MethodDescriptor.<amidst.remote.GetBiomeListRequest, amidst.remote.BiomeListReply>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "amidst.remote.AmidstInterface", "GetBiomeList"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  amidst.remote.GetBiomeListRequest.class, getExtractorOfGetBiomeListRequest()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  amidst.remote.BiomeListReply.class, getExtractorOfBiomeListReply()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getGetBiomeListMethod;
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getCreateNewWorldMethod()} instead. 
  public static final io.grpc.MethodDescriptor<amidst.remote.CreateWorldRequest,
      amidst.remote.CreateNewWorldReply> METHOD_CREATE_NEW_WORLD = getCreateNewWorldMethod();
  
  private static volatile io.grpc.MethodDescriptor<amidst.remote.CreateWorldRequest,
      amidst.remote.CreateNewWorldReply> getCreateNewWorldMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<amidst.remote.CreateWorldRequest> extractorOfCreateWorldRequest;
  private static FlatbuffersUtils.FBExtactor<amidst.remote.CreateWorldRequest> getExtractorOfCreateWorldRequest() {
      if (extractorOfCreateWorldRequest != null) return extractorOfCreateWorldRequest;
      synchronized (AmidstInterfaceGrpc.class) {
          if (extractorOfCreateWorldRequest != null) return extractorOfCreateWorldRequest;
          extractorOfCreateWorldRequest = new FlatbuffersUtils.FBExtactor<amidst.remote.CreateWorldRequest>() {
              public amidst.remote.CreateWorldRequest extract (ByteBuffer buffer) {
                  return amidst.remote.CreateWorldRequest.getRootAsCreateWorldRequest(buffer);
              }
          };
          return extractorOfCreateWorldRequest;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<amidst.remote.CreateNewWorldReply> extractorOfCreateNewWorldReply;
  private static FlatbuffersUtils.FBExtactor<amidst.remote.CreateNewWorldReply> getExtractorOfCreateNewWorldReply() {
      if (extractorOfCreateNewWorldReply != null) return extractorOfCreateNewWorldReply;
      synchronized (AmidstInterfaceGrpc.class) {
          if (extractorOfCreateNewWorldReply != null) return extractorOfCreateNewWorldReply;
          extractorOfCreateNewWorldReply = new FlatbuffersUtils.FBExtactor<amidst.remote.CreateNewWorldReply>() {
              public amidst.remote.CreateNewWorldReply extract (ByteBuffer buffer) {
                  return amidst.remote.CreateNewWorldReply.getRootAsCreateNewWorldReply(buffer);
              }
          };
          return extractorOfCreateNewWorldReply;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<amidst.remote.CreateWorldRequest,
      amidst.remote.CreateNewWorldReply> getCreateNewWorldMethod() {
    io.grpc.MethodDescriptor<amidst.remote.CreateWorldRequest, amidst.remote.CreateNewWorldReply> getCreateNewWorldMethod;
    if ((getCreateNewWorldMethod = AmidstInterfaceGrpc.getCreateNewWorldMethod) == null) {
      synchronized (AmidstInterfaceGrpc.class) {
        if ((getCreateNewWorldMethod = AmidstInterfaceGrpc.getCreateNewWorldMethod) == null) {
          AmidstInterfaceGrpc.getCreateNewWorldMethod = getCreateNewWorldMethod = 
              io.grpc.MethodDescriptor.<amidst.remote.CreateWorldRequest, amidst.remote.CreateNewWorldReply>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "amidst.remote.AmidstInterface", "CreateNewWorld"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  amidst.remote.CreateWorldRequest.class, getExtractorOfCreateWorldRequest()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  amidst.remote.CreateNewWorldReply.class, getExtractorOfCreateNewWorldReply()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getCreateNewWorldMethod;
  }
  
  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static AmidstInterfaceStub newStub(io.grpc.Channel channel) {
    return new AmidstInterfaceStub(channel);
  }
  
  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static AmidstInterfaceBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new AmidstInterfaceBlockingStub(channel);
  }
  
  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static AmidstInterfaceFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new AmidstInterfaceFutureStub(channel);
  }
  
  /**
   */
  public static abstract class AmidstInterfaceImplBase implements io.grpc.BindableService {
    
    /**
     */
    public     void getBiomeData(amidst.remote.BiomeDataRequest request,
        io.grpc.stub.StreamObserver<amidst.remote.BiomeDataReply> responseObserver)     {
      asyncUnimplementedUnaryCall(getGetBiomeDataMethod(), responseObserver);
    }
    
    /**
     */
    public     void getBiomeList(amidst.remote.GetBiomeListRequest request,
        io.grpc.stub.StreamObserver<amidst.remote.BiomeListReply> responseObserver)     {
      asyncUnimplementedUnaryCall(getGetBiomeListMethod(), responseObserver);
    }
    
    /**
     */
    public     void createNewWorld(amidst.remote.CreateWorldRequest request,
        io.grpc.stub.StreamObserver<amidst.remote.CreateNewWorldReply> responseObserver)     {
      asyncUnimplementedUnaryCall(getCreateNewWorldMethod(), responseObserver);
    }
    
    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getGetBiomeDataMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                amidst.remote.BiomeDataRequest,
                amidst.remote.BiomeDataReply>(
                  this, METHODID_GET_BIOME_DATA)))
          .addMethod(
            getGetBiomeListMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                amidst.remote.GetBiomeListRequest,
                amidst.remote.BiomeListReply>(
                  this, METHODID_GET_BIOME_LIST)))
          .addMethod(
            getCreateNewWorldMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                amidst.remote.CreateWorldRequest,
                amidst.remote.CreateNewWorldReply>(
                  this, METHODID_CREATE_NEW_WORLD)))
          .build();
    }
  }
  
  /**
   */
  public static final class AmidstInterfaceStub extends io.grpc.stub.AbstractStub<AmidstInterfaceStub> {
    private AmidstInterfaceStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private AmidstInterfaceStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected AmidstInterfaceStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new AmidstInterfaceStub(channel, callOptions);
    }
    
    /**
     */
    public     void getBiomeData(amidst.remote.BiomeDataRequest request,
        io.grpc.stub.StreamObserver<amidst.remote.BiomeDataReply> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getGetBiomeDataMethod(), getCallOptions()), request, responseObserver);
    }
    
    /**
     */
    public     void getBiomeList(amidst.remote.GetBiomeListRequest request,
        io.grpc.stub.StreamObserver<amidst.remote.BiomeListReply> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getGetBiomeListMethod(), getCallOptions()), request, responseObserver);
    }
    
    /**
     */
    public     void createNewWorld(amidst.remote.CreateWorldRequest request,
        io.grpc.stub.StreamObserver<amidst.remote.CreateNewWorldReply> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getCreateNewWorldMethod(), getCallOptions()), request, responseObserver);
    }
  }
  
  /**
   */
  public static final class AmidstInterfaceBlockingStub extends io.grpc.stub.AbstractStub<AmidstInterfaceBlockingStub> {
    private AmidstInterfaceBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private AmidstInterfaceBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected AmidstInterfaceBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new AmidstInterfaceBlockingStub(channel, callOptions);
    }
    
    /**
     */
    public     amidst.remote.BiomeDataReply getBiomeData(amidst.remote.BiomeDataRequest request)     {
      return blockingUnaryCall(
          getChannel(), getGetBiomeDataMethod(), getCallOptions(), request);
    }
    
    /**
     */
    public     amidst.remote.BiomeListReply getBiomeList(amidst.remote.GetBiomeListRequest request)     {
      return blockingUnaryCall(
          getChannel(), getGetBiomeListMethod(), getCallOptions(), request);
    }
    
    /**
     */
    public     amidst.remote.CreateNewWorldReply createNewWorld(amidst.remote.CreateWorldRequest request)     {
      return blockingUnaryCall(
          getChannel(), getCreateNewWorldMethod(), getCallOptions(), request);
    }
  }
  
  /**
   */
  public static final class AmidstInterfaceFutureStub extends io.grpc.stub.AbstractStub<AmidstInterfaceFutureStub> {
    private AmidstInterfaceFutureStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private AmidstInterfaceFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected AmidstInterfaceFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new AmidstInterfaceFutureStub(channel, callOptions);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<amidst.remote.BiomeDataReply> getBiomeData(
        amidst.remote.BiomeDataRequest request)     {
      return futureUnaryCall(
          getChannel().newCall(getGetBiomeDataMethod(), getCallOptions()), request);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<amidst.remote.BiomeListReply> getBiomeList(
        amidst.remote.GetBiomeListRequest request)     {
      return futureUnaryCall(
          getChannel().newCall(getGetBiomeListMethod(), getCallOptions()), request);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<amidst.remote.CreateNewWorldReply> createNewWorld(
        amidst.remote.CreateWorldRequest request)     {
      return futureUnaryCall(
          getChannel().newCall(getCreateNewWorldMethod(), getCallOptions()), request);
    }
  }
  
  private static final int METHODID_GET_BIOME_DATA = 0;
  private static final int METHODID_GET_BIOME_LIST = 1;
  private static final int METHODID_CREATE_NEW_WORLD = 2;
  
  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final AmidstInterfaceImplBase serviceImpl;
    private final int methodId;
  
    MethodHandlers(AmidstInterfaceImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }
  
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_GET_BIOME_DATA:
          serviceImpl.getBiomeData((amidst.remote.BiomeDataRequest) request,
              (io.grpc.stub.StreamObserver<amidst.remote.BiomeDataReply>) responseObserver);
          break;
        case METHODID_GET_BIOME_LIST:
          serviceImpl.getBiomeList((amidst.remote.GetBiomeListRequest) request,
              (io.grpc.stub.StreamObserver<amidst.remote.BiomeListReply>) responseObserver);
          break;
        case METHODID_CREATE_NEW_WORLD:
          serviceImpl.createNewWorld((amidst.remote.CreateWorldRequest) request,
              (io.grpc.stub.StreamObserver<amidst.remote.CreateNewWorldReply>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }
  
  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;
  
  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (AmidstInterfaceGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)              
              .setSchemaDescriptor(null)              
              .addMethod(getGetBiomeDataMethod())              
              .addMethod(getGetBiomeListMethod())              
              .addMethod(getCreateNewWorldMethod())              
              .build();
        }
      }
    }
    return result;
  }
}
