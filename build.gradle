buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}
plugins {
    id 'com.palantir.git-version' version '0.5.3'
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group = "net.lessqq.minecraft.amidstbridge" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "amidst-forge"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
ext {
    mc_version = '1.14.4'
    forge_version = '28.1.0'
}

version = project.mc_version + '-' + gitVersion()

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20190719-1.14.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/amidst-forge_at.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

ext.sharedManifest = manifest {
    attributes('Implementation-Version': project.version)
}

configurations {
    embed
    compile.extendsFrom embed
}

jar {
    from(configurations.embed)
    manifest {
        from sharedManifest
    }
    doFirst {
        manifest {
			attributes(
			  'Implementation-Version': project.version,
			  'ContainedDeps': configurations.embed.files.collect { it.getName() }.join(" "),
			  'FMLAT': sourceSets.main.resources.files.collect{it.getName()}.findAll{it.endsWith("_at.cfg")}.join(" ")
			  )
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    embed project(path: ':amidst', configuration: 'shadow')
}

project(':amidst') {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'com.github.johnrengelman.shadow'
	
	repositories {
		jcenter()
	}
	
	shadowJar {
		relocate 'org.jnbt', 'amidst.shadow.org.jnbt'
		relocate 'com.google.gson', 'amidst.shadow.com.google.gson'
		relocate 'org.kohsuke.args4j', 'amidst.shadow.org.kohsuke.args4j'
		relocate 'net.miginfocom', 'amidst.shadow.net.miginfocom'
	}
	
	dependencies {
		compile 'com.google.code.gson:gson:2.5'
		compile 'com.miglayout:miglayout-swing:4.2'
		compile 'args4j:args4j:2.32'
		compile files('lib/JNBT_1.3.jar')
		testCompile 'junit:junit:4.11'
	}
	compileJava {
		sourceCompatibility = targetCompatibility = '1.8'
	}
	
	def props = new Properties()
	file('src/main/resources/amidst/metadata.properties').withInputStream { props.load(it) }
	version = "${props['amidst.version.major']}.${props['amidst.version.minor']}${props['amidst.version.preReleaseSuffix']?.trim() ? "-" + props['amidst.version.preReleaseSuffix']?.trim() : ''}"
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}